ggplot(sum_stores,aes(Date,storecount)) + geom_line()
y
test_data[is.na(test_data)] <- 1
sum_stores <- train_data[,.(storecount = .N),by = Date]
ggplot(sum_stores,aes(Date,storecount)) + geom_line()
ggplot(sum_stores,aes(Date,storecount)) + geom_line()
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_line()
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_line() + labs(x = "Count of Stores", y = "Date",
title = "Date VS Store Count")
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_line() + labs(y = "Count of Stores", x = "Date",
title = "Date VS Store Count")
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_point()+ geom_line() + labs(y = "Count of Stores", x = "Date",
title = "Date VS Store Count")
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
test_data[is.na(test_data)]
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
test_data[is.na(test_data)]
train_data[,Date := as.Date(Date)]
test_data[,Date := as.Date(Date)]
train_data <- setorderv(train_data,"Date")
test_data <- setorderv(test_data,"Date")
sum_stores <- train_data[,.(storecount = .N),by = Date]
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_point()+ geom_line() + labs(y = "Count of Stores", x = "Date",
title = "Date VS Store Count")
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
train_data[,Date := as.Date(Date)]
test_data[,Date := as.Date(Date)]
train_data <- setorderv(train_data,"Date")
test_data <- setorderv(test_data,"Date")
sum_stores <- train_data[,.(storecount = .N),by = Date]
ggplot(sum_stores,aes(Date,storecount, group = 1)) + geom_point()+ geom_line() + labs(y = "Count of Stores", x = "Date",
title = "Date VS Store Count")
test_data[is.na(test_data)] <- 1
sum_stores.less <- sum_stores[sum_stores$storecount !=1115]
head(sum_stores.less)
sum_stores.less.935 <- sum_stores.less[sum_stores.less$storecount ==935]
head(sum_stores.less.935)
sum_stores.less.1134 <- sum_stores.less[sum_stores.less$storecount !=935]
head(sum_stores.less.1134)
sum_stores.less.1114 <- sum_stores.less[sum_stores.less$storecount !=935]
head(sum_stores.less.1114)
sum_stores.less <- sum_stores[sum_stores$storecount !=1115]
sum_stores.less
sum_stores.less.935 <- sum_stores.less[sum_stores.less$storecount ==935]
sum_stores.less.935
sum_stores.less.1114 <- sum_stores.less[sum_stores.less$storecount !=935]
sum_stores.less.1114
library(data.table)
library(ggplot2)
library(forecast)
library(xts)
library(dygraphs)
library(caret)
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
summary(train_data)
summary(test_data)
summary(store_data)
train[, lapply(.SD, function(x) length(unique(x)))]
train_data[, lapply(.SD, function(x) length(unique(x)))]
test_data[, lapply(.SD, function(x) length(unique(x)))]
sum(unique(test_data$Store) %in% unique(train_data$Store))
sum(!(unique(train_data$Store) %in% unique(test_data$Store)))
table(train_data$Open) / nrow(train_data)
table(test_data$Open) / nrow(test_data)
table(train_data$Promo) / nrow(train_data)
table(test_data$Promo) / nrow(test_data)
table(train_data$StateHoliday) / nrow(train_data)
table(train_data$StateHoliday) / nrow(train_data)
table(test_data$StateHoliday) / nrow(test_data)
table(train_data$SchoolHoliday) / nrow(train_data)
table(test_data$SchoolHoliday) / nrow(test_data)
plot(train_data$Date, type = "l")
library(forecast)
plot(train_data$Date, type = "l")
plot(train_data$Date)
train_data[,Date := as.Date(Date)]
test_data[,Date := as.Date(Date)]
library(data.table)
library(ggplot2)
library(forecast)
library(xts)
library(dygraphs)
library(caret)
library(forecast)
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
summary(train_data)
summary(test_data)
summary(store_data)
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
train_data[,Date := as.Date(Date)]
test_data[,Date := as.Date(Date)]
train[, Date := as.Date(Date)]
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
summary(train_data)
summary(test_data)
summary(store_data)
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
train_data[,Date := as.Date(Date)]
train_data[,Date := as.Date(Date)]
train_data$Date <- as.Date(as.character(train_data$Date),"%Y%m%d")
train[, Date := as.Date(Date)]
train_data$Date <- as.Date(as.character(train_data$Date),"%Y%m%d")
test[, Date := as.Date(Date)]
train_data[, lapply(.SD, function(x) length(unique(x)))]
test_data[, Date := as.Date(Date)]
plot(train_data$Date, tyle = "l")
plot(test_data$Date, tyle = "l")
plot(train_data$Date, type = "l")
plot(test_data$Date, type = "l")
train_data[, Date := as.Date(Date)]
plot(train_data$Date, type = "l")
train_data <- fread("train.csv")
train_data[, Date := as.Date(Date)]
train_data <- fread("train.csv")
test_data <- fread("test.csv")
store_data <- fread("store.csv")
summary(train_data)
summary(test_data)
summary(store_data)
train_data[is.na(train_data$Open)]
test_data[is.na(test_data$Open)]
train_data[, Date := as.Date(Date)]
test_data[, Date := as.Date(Date)]
train_data[, lapply(.SD, function(x) length(unique(x)))]
test_data[, lapply(.SD, function(x) length(unique(x)))]
sum(unique(test_data$Store) %in% unique(train_data$Store))
sum(!(unique(train_data$Store) %in% unique(test_data$Store)))
table(train_data$Open) / nrow(train_data)
table(test_data$Open) / nrow(test_data)
table(train_data$Promo) / nrow(train_data)
table(test_data$Promo) / nrow(test_data)
table(train_data$StateHoliday) / nrow(train_data)
table(test_data$StateHoliday) / nrow(test_data)
table(train_data$SchoolHoliday) / nrow(train_data)
table(test_data$SchoolHoliday) / nrow(test_data)
plot(train_data$Date, type = "l")
plot(test_data$Date, type = "l")
plot(train_data$Date, type = "l")
plot(test_data$Date, type = "l")
all(table(test$Date) == 856)
all(table(test_data$Date) == 856)
hist(train_data$Sales, 100)
hist(aggregate(train_data[Sales != 0]$Sales,
by = list(train_data[Sales != 0]$Store), mean)$x, 100,
main = "Mean sales per store when store was not closed")
hist(train_data$Customers, 100)
hist(aggregate(train_data[Sales != 0]$Customers,
by = list(train_data[Sales != 0]$Store), mean)$x, 100,
main = "Mean customers per store when store was not closed")
ggplot(train_data[Sales != 0], aes(x = factor(SchoolHoliday), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
ggplot(train_data[Sales != 0], aes(x = factor(SchoolHoliday), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
hist(aggregate(train[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, train_data$DayOfWeek,
main = "Mean sales per store when store was not closed")
hist(aggregate(train_data[Sales != 0]$Sales,
by = list(train[Sales != 0]$Store), mean)$x, train_data$DayOfWeek,
main = "Mean sales per store when store was not closed")
hist(aggregate(train_data[Sales != 0]$Sales,
by = list(train_data[Sales != 0]$Store), mean)$x, train_data$DayOfWeek,
main = "Mean sales per store when store was not closed")
hist(train_data$Sales, train_data$DayOfWeek,
main = "Mean sales per store when store was not closed")
hist(train_data$Sales, train_data$DayOfWeek)
hist(train_data$DayOfWeek)
ggplot(train[Sales != 0], aes(x = factor(DayofWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
ggplot(train_data[Sales != 0], aes(x = factor(DayofWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
ggplot(train_data[Sales != 0], aes(x = factor(DayOfWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
ggplot(train_data[Sales != 0], aes(x = factor(DayOfWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(color = "yellow", outlier.colour = NA, fill = NA)
store_ids <- unique(train$Store)
store_ids <- unique(train_data$Store)
store_ids.jul1 <- train_data$Store[train_data$Date == as.Date("2014-7-1")]
store_ids.missing <- data.frame( store_ids[!(store_ids %in% store_ids.jul1)])
head(store_ids.missing)
store_ids.jan1 <- train_data$Store[train_data$Date == as.Date("2013-01-01")]
store_ids.jan1.missing <- data.frame( store_ids[!(store_ids %in% store_ids.jan1)])
head(store_ids.jan1.missing)
d.jan1 <- as.Date("2013-1-1")
jan1 <- train_data[train_data$Date == d.jan1]
jan1[,.(.N),by = jan1$Open]
jan1.date <- d.jan1
jan1.store <- as.integer(store_ids.jan1.missing)
jan1.dayofweek <- unique(train$DayOfWeek[train$Date == d.jan1])
jan1.dayofweek <- unique(train_data$DayOfWeek[train_data$Date == d.jan1])
jan1.open <- 0
jan1.sales <- 0
jan1.customers <- 0
jan1.promo <- unique(train$Promo[train$Date == d.jan1])
jan1.promo <- unique(train_data$Promo[train_data$Date == d.jan1])
jan1.stateholiday <- unique(train$StateHoliday[train$Date == d.jan1])
jan1.stateholiday <- unique(train_data$StateHoliday[train_data$Date == d.jan1])
jan1.schoolholiday <- unique(train$SchoolHoliday[train$Date == d.jan1])
jan1.schoolholiday <- unique(train_data$SchoolHoliday[train_data$Date == d.jan1])
jan1.row.988 <- data.table(Store = jan1.store,
DayOfWeek = jan1.dayofweek,
Date = jan1.date,
Sales = as.integer(jan1.sales),
Customers = as.integer(jan1.customers),
Open = as.integer(jan1.open) ,
Promo = jan1.promo,
StateHoliday = as.character(jan1.stateholiday),
SchoolHoliday = as.character(jan1.schoolholiday))
str(train)
str(train_data)
str(jan1.row.988)
l <- list(train_data,jan1.row.988)
train <- rbindlist(l)
missingperiod <- seq(as.Date("2014-7-1"),as.Date("2014-12-31"),by="day")
num_rows_missing <- length(missingperiod)*nrow(store_ids.missing)
mising_datatable <- data.table(Store = integer(num_rows_missing),
DayOfWeek = integer(num_rows_missing),
Date = rep(missingperiod,nrow(store_ids.missing)),
Sales = integer(num_rows_missing),
Customers = integer(num_rows_missing),
Open = integer(num_rows_missing),
Promo = integer(num_rows_missing),
StateHoliday = character(num_rows_missing),
SchoolHoliday = integer(num_rows_missing)
)
installstatconnDCOM()
t <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train <- read.csv('train.csv',cols=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train[,6] <- train[,6] == 1
train[,7] <- train[,7] == 1
train[,9] <- train[,9] == 1
summary(train)
store <- read.csv('store.csv',colClasses=c("factor","factor","factor","integer","integer","integer","factor","integer","integer","character"))
store[,7] <- store[,7] == 1
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
#train[,6] <- train[,6] == 1
#train[,7] <- train[,7] == 1
#train[,9] <- train[,9] == 1
summary(train)
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
summary(train)
train[,6] <- train[,6] == 1
train[,7] <- train[,7] == 1
train[,9] <- train[,9] == 1
summary(train)
store <- read.csv('store.csv',colClasses=c("factor","factor","factor","integer","integer","integer","factor","integer","integer","character"))
store[,7] <- store[,7] == 1
summary(store)
store[2,]
test <- read.csv('test.csv',colClasses=c("numeric","factor","factor","Date","integer","integer","factor","factor"))
test[,5] <- test[,5] == 1
test[,6] <- test[,6] == 1
test[,8] <- test[,8] == 1
summary(test)
head(test)
test <- test[2:8]
summary(train$Sales[!train$Open])
summary(train$Sales[!train$Open]) #Summary of the shops that are closed
length(train$Sales[!train$Open]) / nrow(train)
train <- train[train$Open]
train <- train[train$Open,]
head(train)
#Dates
train$Year <- as.numeric(strftime(train$Date, format="%y"))
train$Month <- as.numeric(strftime(train$Date, format="%m"))
#Dates
train$Day <- as.numeric(strftime(train$Date, format="%d"))
train <- train[c(1,4,7:13,2)]
train <- train[c(1,4,7,8,9,10,11,12,13,2)]
train(head)
head(train)
train <- train[c(1,4,7:12,2)]
head(train)
train <- train[train$Open,] #removing the data of closed stores
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train[,6] <- train[,6] == 1 #converting the open column from numerical to logical
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train[,6] <- train[,6] == 1 #converting the open column from numerical to logical
train[,7] <- train[,7] == 1 #converting the Promo column from numerical to logical
train[,9] <- train[,9] == 1 #converting SchoolHoliday column from numerical to logical
summary(train)
#Reading store data
store <- read.csv('store.csv',colClasses=c("factor","factor","factor","integer","integer","integer","factor","integer","integer","character"))
store[,7] <- store[,7] == 1 #converting the Promo2 column from numerical to logical
summary(store)
store[2,] #PromoInterval has various months in it.
test <- read.csv('test.csv',colClasses=c("numeric","factor","factor","Date","integer","integer","factor","factor"))
test[,5] <- test[,5] == 1 #converting the numerical values in Open column to logical
test[,6] <- test[,6] == 1 #converting the numerical values in Promo column to logical
test[,8] <- test[,8] == 1 #converting the numerical values in StateHoliday column to logical
summary(test)
head(test)
test <- test[2:8] #removing the first column as it is similar to Id and is redundant
summary(train$Sales[!train$Open]) #Summary of the shops that are closed
train <- train[train$Open,] #removing the data of closed stores
#Dates are seperated so that they can used as numerical values
train$Day <- as.numeric(strftime(train$Date, format="%d"))
train$Year <- as.numeric(strftime(train$Date, format="%y"))
train$Month <- as.numeric(strftime(train$Date, format="%m"))
train$Week <- as.numeric(strftime(t$Date, format="%W"))
train <- train[c(1,4,7:12,2)]
head(train)
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train[,6] <- train[,6] == 1 #converting the open column from numerical to logical
train[,7] <- train[,7] == 1 #converting the Promo column from numerical to logical
train[,9] <- train[,9] == 1 #converting SchoolHoliday column from numerical to logical
summary(train)
#Reading store data
store <- read.csv('store.csv',colClasses=c("factor","factor","factor","integer","integer","integer","factor","integer","integer","character"))
store[,7] <- store[,7] == 1 #converting the Promo2 column from numerical to logical
summary(store)
store[2,] #PromoInterval has various months in it.
test <- read.csv('test.csv',colClasses=c("numeric","factor","factor","Date","integer","integer","factor","factor"))
test[,5] <- test[,5] == 1 #converting the numerical values in Open column to logical
test[,6] <- test[,6] == 1 #converting the numerical values in Promo column to logical
test[,8] <- test[,8] == 1 #converting the numerical values in StateHoliday column to logical
summary(test)
head(test)
test <- test[2:8] #removing the first column as it is similar to Id and is redundant
summary(train$Sales[!train$Open]) #Summary of the shops that are closed
train <- train[train$Open,] #removing the data of closed stores
#Dates are seperated so that they can used as numerical values
train$Day <- as.numeric(strftime(train$Date, format="%d"))
train$Year <- as.numeric(strftime(train$Date, format="%y"))
train$Month <- as.numeric(strftime(train$Date, format="%m"))
train$Week <- as.numeric(strftime(train$Date, format="%W"))
train <- train[c(1,4,7:12,2)]
head(train)
train <- read.csv('train.csv',colClasses=c("factor","factor","Date","integer","integer","factor","factor","factor","factor"))
train[,6] <- train[,6] == 1 #converting the open column from numerical to logical
train[,7] <- train[,7] == 1 #converting the Promo column from numerical to logical
train[,9] <- train[,9] == 1 #converting SchoolHoliday column from numerical to logical
summary(train)
#Reading store data
store <- read.csv('store.csv',colClasses=c("factor","factor","factor","integer","integer","integer","factor","integer","integer","character"))
store[,7] <- store[,7] == 1 #converting the Promo2 column from numerical to logical
summary(store)
store[2,] #PromoInterval has various months in it.
test <- read.csv('test.csv',colClasses=c("numeric","factor","factor","Date","integer","integer","factor","factor"))
test[,5] <- test[,5] == 1 #converting the numerical values in Open column to logical
test[,6] <- test[,6] == 1 #converting the numerical values in Promo column to logical
test[,8] <- test[,8] == 1 #converting the numerical values in StateHoliday column to logical
summary(test)
head(test)
test <- test[2:8] #removing the first column as it is similar to Id and is redundant
summary(train$Sales[!train$Open]) #Summary of the shops that are closed
train <- train[train$Open,] #removing the data of closed stores
#Dates are seperated so that they can used as numerical values
train$Day <- as.numeric(strftime(train$Date, format="%d"))
train$Year <- as.numeric(strftime(train$Date, format="%y"))
train$Month <- as.numeric(strftime(train$Date, format="%m"))
train$Week <- as.numeric(strftime(train$Date, format="%W"))
train <- train[c(1,4,7:13,2)]
head(train)
#
stores_to_test <- as.numeric(as.character(unique(test$Store)))
stores_to_test[1:10]
stores_to_test
nrow(t)
t
nrow(train)
train <- train[train$Store %in% stores_to_test,]
nrow(t)
nrow(train)
#removing the missing values in test data
test[is.na(test$Open),]
test[test$Store == 622 & test$Date > "2015-09-05" & test$DayOfWeek == 7,]
test[is.na(test$Open),]$Open <- T
test
test[is.na(test$Open),]
#EDA
summary(train$Sales)
sd(train$Sales)
hist(train$Sales,xlab="Sales")
boxplot(train$Sales)
summary(train[train$Sales > 20000,])
days_open <- aggregate(train$Store,list(train$Store),length)
head(days_open)
summary(train[train$Sales > 20000,]) #checking the outliers
#investigating each variable against sales
t.test(train[train$Promo,]$Sales,train[!train$Promo,]$Sales)
t.test(train[train$StateHoliday != 0,]$Sales,train[train$StateHoliday == 0,]$Sales)
t.test(train[train$SchoolHoliday,]$Sales,train[!train$SchoolHoliday,]$Sales)
#Baseline Prediction
store1 <- train[train$Store == 1,]
mean(store1$Sales)
store1$Predic <- mean(store1$Sales)
store1$PredictionResult <- mean(store1$Sales)
store1$ErrorofPrediction <- store$Prediction - store$Sales
store1$ErrorofPrediction <- store$PredictionResult - store1$Sales
store1$ErrorofPrediction <- store1$PredictionResult - store1$Sales
sqrt(mean((store1$Sales-store1$PredictionResult)^2))
#Baseline Prediction
store1 <- train[train$Store == 1,]
mean(store1$Sales)
store1$PredictionResult <- mean(store1$Sales)
store1$ErrorofPrediction <- store1$PredictionResult - store1$Sales
sqrt(mean((store1$Sales-store1$PredictionResult)^2))
#Baseline Prediction
#the baseline prediction would be that the store has 0 sales when closed and we could
#assign the open days having mean of all the sales.
store_one <- train[train$Store == 1,] #Using store no. 1
mean(store_one$Sales) #Mean of the sales for store no.1
store_one$PredictionResult <- mean(store_one$Sales)
store_one$ErrorofPrediction <- store_one$PredictionResult - store_one$Sales
sqrt(mean((store_one$Sales-store_one$PredictionResult)^2)) #root mean sqaured error.
#Baseline Prediction
#the baseline prediction would be that the store has 0 sales when closed and we could
#assign the open days having mean of all the sales.
store_one <- train[train$Store == 1,] #Using store no. 1
mean(store_one$Sales) #Mean of the sales for store no.1
store_one$Result <- mean(store_one$Sales)
store_one$Error <- store_one$Result - store_one$Sales
sqrt(mean((store_one$Sales-store_one$Result)^2)) #root mean sqaured error.
#We check if the median can be used for baseline prediction as well
store_one$Prediction <- median(store$Sales)
#We check if the median can be used for baseline prediction as well
store_one$Result <- median(store$Sales)
#We check if the median can be used for baseline prediction as well
store_one$Result <- median(store_one$Sales)
sqrt(mean((store_one$Sales-store_one$Result)^2))
#For all the stores:
inaccuracies <- rep(0,length(stores_to_test))
sales_means <- aggregate(train$Sales,list(train$Store),mean)
i <- 1
for ( k in teststores) {
inaccuracies[i] <- sqrt(mean((train[train$Store == k,]$Sales - sales_means[sales_means$Group.1 == k,2])^2))
i <- i + 1
}
for ( k in stores_to_test) {
inaccuracies[i] <- sqrt(mean((train[train$Store == k,]$Sales - sales_means[sales_means$Group.1 == k,2])^2))
i <- i + 1
}
summary(inaccuracies)
sd(inaccuracies)
hist(inaccuracies)
#Analyzing the high errors
high_errors <- cbind(as.numeric(as.character(stores_to_test[inaccuracies > 3500])),inaccuracies[inaccuracies > 3500])
high_errors
#we calculate the root mean square deviation for all the stores
train$Results <- apply(train[1],1,function(x){sales_means[sales_means$Group.1 == x,2]})
sqrt(mean((train$Sales-train$Results)^2))
store_function <- function(selected_store) {
store_one <- train[train$Store == selected_store,]  # select a store
idx_shuffle <- sample(nrow(store_one))  # shuffle the data
store_one$Result <- 0
y <- nrow(store_one)
#we use 10 fold cross validation
for (j in 1:10) {
idx <- floor(1+0.1*(j-1)*y):(0.1*j*y)  #select 10% data rows
test_set <- store_one[idx_shuffle[idx],]  #the set for testing
train_set <- store_one[idx_shuffle[-idx],]  #the set for training
lr_m <- lm(Sales ~ Promo + SchoolHoliday + DayOfWeek + as.factor(Year) + as.factor(Month)
+ as.factor(Day) + as.factor(Week), train_set)  # The model for linear regression
store_one[idx_shuffle[idx],]$Result <- predict(lr_m,test_set)
#using the model to use on test set and predict results
}
print(paste("Prediction for 13/6/1: ", store_one[store_one$Year == 13 & store_one$Month == 6 & store_one$Day == 1,]$Result))
store_one[store_one$Year == 13 & store_one$Month == 6 & store_one$Day == 1,]$Result <- mean(store_one$Result)
print(paste("Training error: ", summary.lm(lr_m)[6]))  # this is the training error of the model that was fitted last
sqrt(mean((store_one$Sales-store_one$Result)^2))
}
paste("RMSE: ", store_function(1))
print(system.time(print(paste("RMSE: ", store_function(1014)))))
View(store_one)
paste("RMSE: ", store_function(1))
paste("RMSE: ", store_function(1014))
store_function <- function(selected_store) {
store_one <- train[train$Store == selected_store,]  # select a store
idx_shuffle <- sample(nrow(store_one))  # shuffle the data
store_one$Result <- 0
y <- nrow(store_one)
#we use 10 fold cross validation
for (j in 1:10) {
idx <- floor(1+0.1*(j-1)*y):(0.1*j*y)  #select 10% data rows
test_set <- store_one[idx_shuffle[idx],]  #the set for testing
train_set <- store_one[idx_shuffle[-idx],]  #the set for training
lr_m <- lm(Sales ~ Promo + SchoolHoliday + DayOfWeek + as.factor(Year) + as.factor(Month)
+ as.factor(Day) + as.factor(Week), train_set)  # The model for linear regression
store_one[idx_shuffle[idx],]$Result <- predict(lr_m,test_set)
#using the model to use on test set and predict results
}
print(paste("Training error: ", summary.lm(lr_m)[6]))  # this is the training error of the model that was fitted last
sqrt(mean((store_one$Sales-store_one$Result)^2))
}
paste("RMSE: ", store_function(1))
